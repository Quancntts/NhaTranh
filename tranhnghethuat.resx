<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TextBox1.Text" xml:space="preserve">
    <value>BanTranh có nhiều lựa chọn tranh treo tường nghệ thuật đẹp để bạn khám phá, được tổ chức theo các chủ đề khác nhau hoặc sắp xếp tranh theo họa sĩ. Tranh nghệ thuật là một phương tiện thể hiện cái đẹp từ thời cổ đại đến thời hiện đại, làm cho nó trở thành một đại sứ thực sự cho mỹ thuật. Ngay cả ngày nay, nó là hiện thân của nghệ thuật thị giác xuất sắc.

Một bức tranh là trên tất cả các khái niệm và ý tưởng đằng sau các nét vẽ và quá trình nghệ thuật. Với ý nghĩ này, hai xu hướng chính tương phản với nhau: nghệ thuật tượng hình và nghệ thuật trừu tượng. Tuy nhiên, chúng chỉ đơn thuần là hai nguyên tắc chỉ đạo trong số các phong trào hình ảnh đã được phát triển trong suốt những năm qua và đã đến để thiết lập lịch sử nghệ thuật. Mỗi phong trào nghệ thuật này đã đóng vai trò của họ, thường dựa trên những thành tựu từ quá khứ hoặc bằng cách làm ngược lại chính xác với các kỹ thuật trước đó. Như với hội họa tối giản và nghệ thuật đại chúng, các chuẩn mực đã phát triển và chúng không còn giống nhau, tạo ra tính thẩm mỹ mới và thay đổi cách chúng ta nhìn nhận nghệ thuật.

Nếu nghệ thuật đương đại thường được kết hợp với hội họa trừu tượng, thì bằng mọi cách nó không thể được không tồn tại mà thiếu thể loại này. Nghệ thuật tượng hình đang trở lại trên trường nghệ thuật hiện tại và các nghệ sĩ đang sử dụng phong cách này trên khắp thế giới. Hội họa đương đại không bao giờ tĩnh và các tác phẩm nghệ thuật thể hiện trong lĩnh vực này là bằng chứng.

Tại BanTranh, chúng tôi cung cấp một loạt các bức tranh nghệ thuật đẹp và đa dạng về thể loại, cả hiện đại và đương đại, từ các họa sĩ tài năng nhất. Từ các bức tranh bạn sẽ khám phá các chủ đề đã mê hoặc các họa sĩ đương đại đã thành danh đến các họa sĩ mới thông qua các bức tranh nghệ thuật, tranh phong cảnh, chân dung, tĩnh vật, khỏa thân và nhiều hơn nữa.</value>
  </data>
</root>